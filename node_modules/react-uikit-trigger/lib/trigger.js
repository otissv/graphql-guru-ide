'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ufunc = require('ufunc');

var _reactUikitBase = require('react-uikit-base');

var _reactUikitButton = require('react-uikit-button');

var _reactUikitButton2 = _interopRequireDefault(_reactUikitButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Trigger = function Trigger(props) {
  var icon = (0, _ufunc.maybeIf)(_react2.default.createElement('i', { className: 'uk-icon-' + props.icon }))(props.icon);

  var cssClassNames = _reactUikitBase.helpers.cleanClasses([props.classes, props.className]);

  // Remove non valid html attributes
  var ignoreProps = ['body', 'children', 'classes', 'kitid', 'opened', 'type'];

  var cleanProps = _reactUikitBase.helpers.cleanProps(ignoreProps)(props);

  // Element
  var type = {
    button: _react2.default.createElement(
      _reactUikitButton2.default,
      _extends({}, props, {
        className: cssClassNames,
        block: true,
        kitid: props.kitid,
        body: props.body
      }),
      props.children,
      ' ',
      icon
    ),

    link: _react2.default.createElement(
      _reactUikitButton2.default,
      _extends({}, props, {
        className: cssClassNames,
        block: true,
        kitid: props.kitid,
        type: 'link',
        body: props.body
      }),
      props.children,
      ' ',
      icon
    ),

    span: _react2.default.createElement(
      'span',
      _extends({}, cleanProps, _reactUikitBase.helpers.events, {
        className: cssClassNames,
        'data-kitid': props.kitid
      }),
      props.body,
      props.children,
      ' ',
      icon
    ),

    div: _react2.default.createElement(
      'div',
      _extends({}, cleanProps, {
        className: cssClassNames
      }, _reactUikitBase.helpers.events, {
        'data-kitid': props.kitid
      }),
      props.body,
      props.children,
      ' ',
      icon
    )
  };
  if (props.type === 'span') {}

  return (0, _ufunc.either)(type[props.type], type['button'])(props.type);
};

Trigger.propTypes = {
  body: _react2.default.PropTypes.any,
  children: _react2.default.PropTypes.any,
  className: _react2.default.PropTypes.string,
  classes: _react2.default.PropTypes.array,
  kitid: _react2.default.PropTypes.string,
  onClick: _react2.default.PropTypes.func,
  opened: _react2.default.PropTypes.bool,
  type: _react2.default.PropTypes.oneOf(['button', 'link', 'span', 'div'])
};

exports.default = (0, _reactUikitBase.base)(Trigger);