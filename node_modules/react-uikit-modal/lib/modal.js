'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactUikitBase = require('react-uikit-base');

var _reactUikitBase2 = _interopRequireDefault(_reactUikitBase);

var _ufunc = require('ufunc');

var _dialog = require('./dialog');

var _dialog2 = _interopRequireDefault(_dialog);

var _reactUikitTrigger = require('react-uikit-trigger');

var _reactUikitTrigger2 = _interopRequireDefault(_reactUikitTrigger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var bodyStyle = function bodyStyle(pading, overflow) {
  var body = document.getElementsByTagName('body');
  body[0].style.paddingRight = pading;
  body[0].style.overflow = overflow;
};

var getModalElement = function getModalElement(kitid) {
  return {
    modal: _reactUikitBase2.default.helpers.getElement('modal-' + kitid),
    dialog: _reactUikitBase2.default.helpers.getElement('dialog-' + kitid)
  };
};

var Modal = function (_React$Component) {
  _inherits(Modal, _React$Component);

  function Modal(props) {
    _classCallCheck(this, Modal);

    var _this = _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));

    _this.handleOkClick = _this.handleOkClick.bind(_this);
    _this.handleCloseClick = _this.handleCloseClick.bind(_this);
    _this.handleToggleClick = _this.handleToggleClick.bind(_this);
    _this.handleConfirmClick = _this.handleConfirmClick.bind(_this);
    return _this;
  }

  _createClass(Modal, [{
    key: 'handleOkClick',
    value: function handleOkClick(e) {
      var props = this.props;

      var _getModalElement = getModalElement(props.kitid),
          modal = _getModalElement.modal,
          dialog = _getModalElement.dialog;

      if (props.ok && props.ok.onClick) {
        var value = props.type === 'prompt' ? _reactUikitBase2.default.helpers.getElement('input-' + props.kitid).value : null;

        props.ok.onClick({
          event: e,
          item: {
            kitid: props.kitid,
            value: value
          }
        });
      }

      if (props.confirm && !props.confirm.show) {
        props.confirm.animate.in(modal, dialog);
      } else {
        props.trigger.animate.out(modal, dialog);
        setTimeout(function () {
          return bodyStyle('', '');
        }, 200);
      }
    }
  }, {
    key: 'handleConfirmClick',
    value: function handleConfirmClick(e) {
      e && e.preventDefault();

      var props = this.props;

      var _getModalElement2 = getModalElement(props.kitid),
          modal = _getModalElement2.modal,
          dialog = _getModalElement2.dialog;

      if (props.confirm && props.confirm.onClick) {
        props.confirm.onClick({
          event: e,
          item: { kitid: props.kitid }
        });
      }

      props.confirm.animate.out(modal, dialog);
      setTimeout(function () {
        return bodyStyle('', '');
      }, 200);
    }
  }, {
    key: 'handleCloseClick',
    value: function handleCloseClick(e) {
      e && e.preventDefault();

      var props = this.props;

      var _getModalElement3 = getModalElement(props.kitid),
          modal = _getModalElement3.modal,
          dialog = _getModalElement3.dialog;

      props.trigger.animate.out(modal, dialog);
      setTimeout(function () {
        return bodyStyle('', '');
      }, 200);
    }
  }, {
    key: 'handleToggleClick',
    value: function handleToggleClick(e) {
      var _this2 = this;

      var props = this.props;

      var _getModalElement4 = getModalElement(props.kitid),
          modal = _getModalElement4.modal,
          dialog = _getModalElement4.dialog;

      var show = function show() {
        bodyStyle('16px', 'hidden');
        props.trigger.animate.in(modal, dialog);
      };

      var hide = function hide() {
        var kitid = e.target.dataset ? e.target.dataset.kitid : undefined;

        if (typeof kitid !== 'undefined') {
          var prefix = kitid.substr(0, kitid.indexOf('-'));

          if (prefix === 'modal') {
            _this2.handleCloseClick(e);
          }
        }
      };

      (0, _ufunc.either)(show, hide)(!this.props.show);
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props;

      // CSS classes
      var cssClassNames = _reactUikitBase2.default.helpers.cleanClasses(['uk-modal', props.classes, props.className]);

      var ignoreProps = ['blank', 'cancel', 'caption', 'children', 'className', 'classes', 'close', 'confirm', 'dialog', 'footer', 'header', 'kitid', 'lightbox', 'ok', 'large', 'show', 'trigger', 'type'];

      var cleanProps = _reactUikitBase2.default.helpers.cleanProps(ignoreProps)(_extends({}, props, {
        confirm: null,
        ok: null,
        show: null,
        trigger: null
      }));

      // Return Component
      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(_reactUikitTrigger2.default, _extends({}, props.trigger, { kitid: 'trigger-' + props.kitid, onClick: this.handleToggleClick })),
        _react2.default.createElement(
          'div',
          _extends({}, cleanProps, {
            className: cssClassNames,
            'data-kitid': 'modal-' + props.kitid,
            onClick: this.handleToggleClick
          }),
          _react2.default.createElement(
            _dialog2.default,
            _extends({}, props.dialog, {
              blank: props.blank,
              cancel: Object.assign({
                kitid: 'ok-' + props.kitid,
                onClick: this.handleCloseClick
              }, props.cancel),
              caption: props.caption,
              confirm: _extends({}, props.confirm, {
                kitid: 'confirm-' + props.kitid,
                onClick: this.handleConfirmClick
              }),
              footer: props.footer,
              header: props.header,
              kitid: props.kitid,
              large: props.large,
              lightbox: props.lightbox,
              ok: Object.assign({}, props.ok, {
                kitid: 'ok-' + props.kitid,
                onClick: this.handleOkClick
              }),
              onClose: props.close ? this.handleCloseClick : null,
              spinner: props.spinner,
              type: props.type
            }),
            props.children
          )
        )
      );
    }
  }]);

  return Modal;
}(_react2.default.Component);

Modal.propTypes = {
  blank: _react2.default.PropTypes.bool,
  cancel: _react2.default.PropTypes.object,
  caption: _react2.default.PropTypes.node,
  children: _react2.default.PropTypes.any,
  className: _react2.default.PropTypes.string,
  classes: _react2.default.PropTypes.array,
  close: _react2.default.PropTypes.bool,
  confirm: _react2.default.PropTypes.object,
  dialog: _react2.default.PropTypes.object,
  footer: _react2.default.PropTypes.any,
  header: _react2.default.PropTypes.any,
  kitid: _react2.default.PropTypes.string,
  lightbox: _react2.default.PropTypes.bool,
  ok: _react2.default.PropTypes.object,
  large: _react2.default.PropTypes.bool,
  show: _react2.default.PropTypes.bool,
  trigger: _react2.default.PropTypes.object,
  type: _react2.default.PropTypes.oneOf(['block', 'alert', 'prompt', 'confirm'])
};

exports.default = _reactUikitBase2.default.base(Modal);