'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactUikitBase = require('react-uikit-base');

var _navItem = require('./nav-item');

var _navItem2 = _interopRequireDefault(_navItem);

var _cuid = require('cuid');

var _cuid2 = _interopRequireDefault(_cuid);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Nav = function Nav(props) {
  // CSS classes
  var type = {
    bar: 'uk-nav-navbar',
    dropdown: 'uk-nav-dropdown',
    offcanvas: 'uk-nav-offcanvas',
    side: 'uk-nav-side',
    sub: 'uk-nav-sub',
    thumbnail: 'uk-thumbnav'
  };

  var cssClassNames = _reactUikitBase.helpers.cleanClasses(['uk-nav', props.classes, type[props.type] || type['side'], props.parent ? 'uk-nav-parent-icon' : null, props.className]);

  // Remove non valid html attributes
  var ignoreProps = ['children', 'classes', 'items', 'kitid', 'parent', 'type'];

  var cleanProps = _reactUikitBase.helpers.cleanProps(ignoreProps)(props);

  // Elements
  var items = props.items ? props.items.map(function (item) {
    return _react2.default.createElement(_navItem2.default, _extends({}, item, { key: item.kitid || (0, _cuid2.default)() }));
  }) : props.items;

  // Return Component
  return _react2.default.createElement(
    'ul',
    _extends({}, cleanProps, {
      className: cssClassNames,
      'data-kitid': props.kitid
    }),
    items,
    props.children
  );
};

Nav.propTypes = {
  children: _react2.default.PropTypes.any,
  className: _react2.default.PropTypes.string,
  classes: _react2.default.PropTypes.array,
  items: _react2.default.PropTypes.array,
  kitid: _react2.default.PropTypes.string,
  parent: _react2.default.PropTypes.bool,
  type: _react2.default.PropTypes.oneOf(['dropdown', 'offcanvas', 'side', 'sub', 'thumbnail'])
};

exports.default = (0, _reactUikitBase.base)(Nav);