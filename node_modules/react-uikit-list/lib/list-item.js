'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactUikitBase = require('react-uikit-base');

var _reactUikitBase2 = _interopRequireDefault(_reactUikitBase);

var _ufunc = require('ufunc');

var _ufunc2 = _interopRequireDefault(_ufunc);

var _reactUikitBadge = require('react-uikit-badge');

var _reactUikitBadge2 = _interopRequireDefault(_reactUikitBadge);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ListItem = function (_React$Component) {
  _inherits(ListItem, _React$Component);

  function ListItem(props) {
    _classCallCheck(this, ListItem);

    var _this = _possibleConstructorReturn(this, (ListItem.__proto__ || Object.getPrototypeOf(ListItem)).call(this, props));

    _this.handleClick = _this.handleClick.bind(_this);
    return _this;
  }

  _createClass(ListItem, [{
    key: 'getItemDetails',
    value: function getItemDetails(element) {
      var kitid = element.dataset.kitid;
      var index = kitid.match(/\.(.*)/)[1];

      return {
        component: this,
        index: index,
        kitid: this.props.kitid
      };
    }
  }, {
    key: 'handleClick',
    value: function handleClick(e) {
      e.preventDefault();
      e.stopPropagation ? e.stopPropagation() : e.cancelBubble = true;

      var element = e.currentTarget;

      if (this.props.onClick) {
        this.props.onClick({
          event: e,
          item: this.getItemDetails(element)
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props;

      // CSS classes
      var cssClassNames = _reactUikitBase2.default.helpers.cleanClasses([props.active ? 'uk-active' : null, props.classes, props.className]);

      // Remove non valid html attributes
      var ignoreProps = ['active', 'badge', 'body', 'children', 'classes', 'description', 'kitid', 'onClick', 'onSelect', 'selectable'];

      var cleanProps = _reactUikitBase2.default.helpers.cleanProps(ignoreProps)(props);

      // Elements
      var badge = _ufunc2.default.maybeIf(_react2.default.createElement(_reactUikitBadge2.default, {
        kitid: 'badge-' + props.kitid,
        float: 'right',
        body: props.badge ? props.badge.body : null,
        context: props.badge ? props.badge.context : null,
        notification: props.badge ? props.badge.notification : null
      }))(props.badge);

      var selectable = function selectable(index) {
        if (props.selectable && props.selectable.checked) {
          var _ret = function () {
            var checked = props.selectable.checked;


            return {
              v: _ufunc2.default.maybeIf(_ufunc2.default.either(function () {
                return checked.on;
              }, function () {
                return checked.off;
              })(props.checked))(props.selectable)
            };
          }();

          if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
        }
      };

      var attr = _extends({}, cleanProps, _reactUikitBase2.default.events(props), {
        'data-kitid': props.kitid,
        className: cssClassNames,
        onClick: this.handleClick
      });

      var link = _react2.default.createElement(
        'li',
        _extends({}, attr, {
          className: cssClassNames }),
        _react2.default.createElement(
          'a',
          { style: { display: 'block' },
            href: props.href,
            className: props.active ? 'uk-active' : null
          },
          selectable(),
          ' ',
          props.body,
          ' ',
          badge
        )
      );

      var text = _react2.default.createElement(
        'li',
        attr,
        props.selectable,
        ' ',
        props.body,
        ' ',
        props.children
      );

      // Return Component
      var component = _ufunc2.default.either(link, text);
      return component(props.href);
    }
  }]);

  return ListItem;
}(_react2.default.Component);

ListItem.propTypes = {
  active: _react2.default.PropTypes.bool,
  badge: _react2.default.PropTypes.object,
  body: _react2.default.PropTypes.any,
  children: _react2.default.PropTypes.any,
  className: _react2.default.PropTypes.string,
  classes: _react2.default.PropTypes.array,
  description: _react2.default.PropTypes.string,
  href: _react2.default.PropTypes.string,
  kitid: _react2.default.PropTypes.string,
  onClick: _react2.default.PropTypes.func,
  onSelect: _react2.default.PropTypes.func,
  selectable: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.bool, _react2.default.PropTypes.object])
};

exports.default = _reactUikitBase2.default.base(ListItem);